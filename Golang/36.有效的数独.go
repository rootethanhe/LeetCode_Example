package main

import "fmt"

func isValidSudoku(board [][]byte) bool {
	// 初始化记录器(行、列、宫)
	rows := make([][]bool, 9)
	cols := make([][]bool, 9)
	boxes := make([][]bool, 9)

	for i := 0; i < 9; i++ {
		rows[i] = make([]bool, 10) // 数字0-9(索引0不用)
		cols[i] = make([]bool, 10)
		boxes[i] = make([]bool, 10)
	}

	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			// 跳过空白单元格
			if board[i][j] == '.' {
				continue
			}

			// 字符转数字(‘5’->5)
			num := board[i][j] - '0'

			// 计算宫索引(核心公式)
			boxIndex := (i/3)*3 + j/3

			// 检查是否重复
			if rows[i][num] || cols[j][num] || boxes[boxIndex][num] {
				return false
			}

			// 更新记录器
			rows[i][num] = true
			cols[j][num] = true
			boxes[boxIndex][num] = true
		}
	}

	return true
}

func main() {
	// 示例1（有效）
	board1 := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	fmt.Println("示例1:", isValidSudoku(board1)) // true

	// 示例2（无效：左上宫重复8）
	board2 := [][]byte{
		{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	fmt.Println("示例2:", isValidSudoku(board2)) // false
}
